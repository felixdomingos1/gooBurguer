generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Burger {
    id              String         @id @default(uuid())
    name            String
    description     String
    price           Float
    originalPrice   Float?
    image           String
    images          String // Store as JSON string
    category        BurgerCategory
    ingredients     String // Store as JSON string
    preparationTime Int
    calories        Int?
    isAvailable     Boolean        @default(true)
    isFeatured      Boolean        @default(false)
    isNew           Boolean        @default(false)
    ratingAverage   Float?         @default(0)
    ratingCount     Int?           @default(0)
    tags            String // Store as JSON string
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    reviews         Review[]
    OrderItem       OrderItem[]
}

enum BurgerCategory {
    CLASSIC
    PREMIUM
    VEGETARIAN
    VEGAN
    SIGNATURE
}

model Review {
    id        String   @id @default(uuid())
    burger    Burger   @relation(fields: [burgerId], references: [id])
    burgerId  String
    userId    String
    userName  String
    rating    Int
    comment   String
    createdAt DateTime @default(now())
}

model User {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    password  String
    address   String?
    phone     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orders    Order[]
    role      UserRole @default(USER)
    isTemp    Boolean  @default(false) // Para identificar usuários temporários
}

enum UserRole {
    ADMIN
    USER
    DELIVERY
}

model Order {
    id            String      @id @default(uuid())
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    items         OrderItem[]
    total         Float
    status        OrderStatus @default(PENDING)
    address       String
    phone         String
    notes         String?
    customerName  String? // Para pedidos de usuários não logados
    customerPhone String? // Para pedidos de usuários não logados
    customerEmail String? // Para pedidos de usuários não logados
    deliveryFee   Float?      @default(0)
    estimatedTime Int? // Tempo estimado em minutos
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model OrderItem {
    id             String  @id @default(uuid())
    order          Order   @relation(fields: [orderId], references: [id])
    orderId        String
    burger         Burger  @relation(fields: [burgerId], references: [id])
    burgerId       String
    quantity       Int     @default(1)
    price          Float
    specialRequest String?
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PREPARING
    READY
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
}

// Modelo para configurações do restaurante
model RestaurantConfig {
    id                String   @id @default(uuid())
    name              String
    address           String
    phone             String
    email             String
    deliveryFee       Float    @default(0)
    minOrderValue     Float    @default(0)
    maxDeliveryRadius Float    @default(10) // em km
    isOpen            Boolean  @default(true)
    openingHours      String // Store as JSON string
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model Notification {
    id        String           @id @default(uuid())
    type      NotificationType
    title     String
    message   String
    userId    String?
    orderId   String?
    isRead    Boolean          @default(false)
    createdAt DateTime         @default(now())
}

enum NotificationType {
    ORDER_CREATED
    ORDER_CONFIRMED
    ORDER_READY
    ORDER_DELIVERED
    ORDER_CANCELLED
    SYSTEM
}
